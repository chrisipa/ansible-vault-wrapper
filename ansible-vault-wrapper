#!/bin/bash

#################
# CONFIGURATION #
#################

# set defaults for variables
vaultFileName="vault.yml"
vaultPasswordFile="/tmp/vault-password-file-$(date +%s%N).txt"


#############
# FUNCTIONS #
#############

# --------------------------------------------------------
# Function for creating log entries on the console
# --------------------------------------------------------
# $1 - Log level
# $2 - Log text
# --------------------------------------------------------
function log() {

    # read parameters
    local level="$1"
    local text="$2"

    # create log message
    local now=$(date +"%d-%m-%Y %H:%M:%S")
    echo -e "\n$now [$level] $text\n"
}

# ---------------------------------------------------------------
# Function for reading the vault password and save it to a file
# ---------------------------------------------------------------
function createVaultPasswordFile() {

    # logging
    log "INFO" "Creating vault password file '$vaultPasswordFile'"
    
    # read vault password from command line
    read -s -p "Vault Password: " vaultPassword
    echo ""

    # create vault password file
    echo "$vaultPassword" > "$vaultPasswordFile"

    # limit permissions for vault password file
    chmod 600 "$vaultPasswordFile"
}

# ---------------------------------------------------------------
# Function for removing the vault password file
# ---------------------------------------------------------------
function removeVaultPasswordFile() {
    
    # logging
    log "INFO" "Removing vault password file '$vaultPasswordFile'"

    # remove vault password file
    rm -f "$vaultPasswordFile"
}

# ---------------------------------------------------------------
# Function for decrypting all vault files
# ---------------------------------------------------------------
function decrypt() {

    # logging
    log "INFO" "Decrypting all vault files"

    # create vault password file
    createVaultPasswordFile

    # iterate over all vault files and decrypt them
    find -type f -name "$vaultFileName" | while read vaultFile
    do
        # Logging
        echo "Decrypting vault file '$vaultFile'"

        # decrypt current vault file
        ansible-vault decrypt "$vaultFile" --vault-password-file "$vaultPasswordFile" > /dev/null 2>&1
    done

    # remove vault password file
    removeVaultPasswordFile
}

# ---------------------------------------------------------------
# Function for encrypting all vault files
# ---------------------------------------------------------------
function encrypt() {

    # logging
    log "INFO" "Encrypting all vault files"

    # create vault password file
    createVaultPasswordFile

    # iterate over all vault files and encrypt them
    find -type f -name "$vaultFileName" | while read vaultFile
    do
        # Logging
        echo "Decrypting vault file '$vaultFile'"

        # encrypt current vault file
        ansible-vault encrypt "$vaultFile" --vault-password-file "$vaultPasswordFile" > /dev/null 2>&1
    done

    # remove vault password file
    removeVaultPasswordFile
}

# ---------------------------------------------------------------
# Function to rekey all vault files
# ---------------------------------------------------------------
function rekey() {

    # logging
    log "INFO" "Rekeying all vault files"

    # decrypt all vault files
    decrypt

    # encrypt all vault files
    encrypt
}

# ---------------------------------------------------------------
# Function to search secrets in all vault files
# ---------------------------------------------------------------
function search() {

    # create vault password file
    createVaultPasswordFile

    # read secret text from command line
    read -s -p "Secret Text: " secretText
    echo ""

    # logging
    log "INFO" "Searching secret text in all vault files"

    # iterate over all vault files and search for the secret
    find -type f -name "$vaultFileName" | while read vaultFile
    do
        output="$(ansible-vault view $vaultFile --vault-password-file $vaultPasswordFile | grep -F $secretText)"
        if [ "$output" != "" ]
        then
            echo "Secret text found in file '$vaultFile'"
        fi
    done

    # remove vault password file
    removeVaultPasswordFile
}

# ---------------------------------------------------------------
# Function for printing the usage of this script
# ---------------------------------------------------------------
function usage() {

    # print help text
    cat <<USAGE
Usage:
  $scriptName [Options] <Args>

Options:
  -d    Decrypt all vault files
  -e    Encrypt all vault files
  -h    Show this help text
  -r    Rekey (change password for) all vault files
  -s    Search for secret text in all vault files

Example:
  $scriptName -s

USAGE

    # exit with error
    exit -1
}


##########
# SCRIPT #
##########

# echo script banner
echo ""
echo "#########################"
echo "# Ansible Vault Wrapper #"
echo "#########################"
echo ""

# get script folder
scriptPath="$(readlink -f $0)"
scriptFolder="$(dirname $scriptPath)"
scriptName="$(basename $scriptPath)"

# show help text if action is not set
if [ "$1" == "" ]
then
    usage
    exit -1
fi

# get command line args
while getopts dehrs opt
do
    case $opt in
        d)
            decrypt
        ;;
        e)
            encrypt
        ;;
        h)
            usage
            exit -1
        ;;
        r)
            rekey
        ;;
        s)
            search
        ;;   
        \?)
            log "ERROR" "Please specify a valid option"
            exit -1
        ;;
    esac
done   